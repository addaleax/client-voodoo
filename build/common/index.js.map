{"version":3,"sources":["common/index.ts"],"names":[],"mappings":";;;;;;;;AAAA,IAAY,EAAE,GAAA,OAAA,CAAM,IAAI,CAAC,CAAA;AACzB,IAAI,QAAQ,GAAG,OAAO,CAAE,UAAU,CAAE,CAAC;AAErC,IAAI,MAAM,GAAwD,QAAQ,CAAC,SAAS,CAAE,OAAO,CAAE,QAAQ,CAAE,CAAE,CAAC;AAC5G,IAAI,QAAQ,GAAuD,QAAQ,CAAC,SAAS,CAAE,EAAE,CAAC,MAAM,CAAE,CAAC;AACnG,IAAI,QAAQ,GAAG,SAAX,QAAQ,CAAa,IAAY,EAAA;AAEpC,WAAO,sBAAsB,UAAU,OAAO,EAAA;AAE7C,UAAE,CAAC,MAAM,CAAE,IAAI,EAAE,OAAO,CAAE,CAAC;KAC3B,CAAE,CAAC;CACJ,CAAC;AACF,IAAI,UAAU,GAA2D,QAAQ,CAAC,SAAS,CAAE,EAAE,CAAC,QAAQ,CAAE,CAAC;AAC3G,IAAI,WAAW,GAAsD,QAAQ,CAAC,SAAS,CAAE,EAAE,CAAC,SAAS,CAAE,CAAC;AACxG,IAAI,KAAK,GAA4D,QAAQ,CAAC,SAAS,CAAE,EAAE,CAAC,KAAK,CAAE,CAAC;AACpG,IAAI,MAAM,GAA0C,QAAQ,CAAC,SAAS,CAAE,EAAE,CAAC,IAAI,CAAE,CAAC;AAClF,IAAI,SAAS,GAA0C,QAAQ,CAAC,SAAS,CAAE,EAAE,CAAC,OAAO,CAAE,CAAC;AACxF,IAAI,oBAAoB,GAA0C,QAAQ,CAAC,SAAS,CAAE,OAAO,CAAE,mBAAmB,CAAE,CAAE,CAAC;AAEvH,OAAA,CAAA,OAAA,GAAe;AACd,UAAM,EAAE,MAAM;AACd,YAAQ,EAAE,QAAQ;AAClB,YAAQ,EAAE,QAAQ;AAClB,cAAU,EAAE,UAAU;AACtB,eAAW,EAAE,WAAW;AACxB,SAAK,EAAE,KAAK;AACZ,UAAM,EAAE,MAAM;AACd,aAAS,EAAE,SAAS;AACpB,wBAAoB,EAAE,oBAAoB;CAC1C,CAAC","file":"common/index.js","sourcesContent":["import * as fs from 'fs';\nlet Bluebird = require( 'bluebird' );\n\nlet mkdirp: ( path: string, mode?: string ) => Promise<boolean> = Bluebird.promisify( require( 'mkdirp' ) );\nlet fsUnlink: ( path: string ) => Promise<NodeJS.ErrnoException> = Bluebird.promisify( fs.unlink );\nlet fsExists = function( path: string ): Promise<boolean>\n{\n\treturn new Promise<boolean>( function( resolve )\n\t{\n\t\tfs.exists( path, resolve );\n\t} );\n};\nlet fsReadFile: ( path: string, encoding?: string ) => Promise<string> = Bluebird.promisify( fs.readFile );\nlet fsWriteFile: ( path: string, data: string ) => Promise<string> = Bluebird.promisify( fs.writeFile );\nlet chmod:( path: string, mode: string | number ) => Promise<void> = Bluebird.promisify( fs.chmod );\nlet fsStat: ( path: string ) => Promise<fs.Stats> = Bluebird.promisify( fs.stat );\nlet fsReadDir: ( path: string ) => Promise<string[]> = Bluebird.promisify( fs.readdir );\nlet fsReadDirRecursively: ( path: string ) => Promise<string[]> = Bluebird.promisify( require( 'recursive-readdir' ) );\n\nexport default {\n\tmkdirp: mkdirp,\n\tfsUnlink: fsUnlink,\n\tfsExists: fsExists,\n\tfsReadFile: fsReadFile,\n\tfsWriteFile: fsWriteFile,\n\tchmod: chmod,\n\tfsStat: fsStat,\n\tfsReadDir: fsReadDir,\n\tfsReadDirRecursively: fsReadDirRecursively,\n};"],"sourceRoot":"../../src/"}