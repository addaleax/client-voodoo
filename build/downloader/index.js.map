{"version":3,"sources":["downloader/index.js","downloader/index.ts"],"names":["Downloader","Downloader.download","DownloadHandleState","DownloadHandle","DownloadHandle.constructor","DownloadHandle.start","DownloadHandle.stop","DownloadHandle.download","DownloadHandle.onProgress","DownloadHandle.onTick","DownloadHandle.onError","DownloadHandle.onFinished","DownloadHandle.from","DownloadHandle.to","DownloadHandle.peakKbps","DownloadHandle.lowKbps","DownloadHandle.avgKbps","DownloadHandle.currentKbps","DownloadHandle.currentAveragedSpeed","DownloadHandle.promise"],"mappings":"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","file":"downloader/index.js","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, Promise, generator) {\n    return new Promise(function (resolve, reject) {\n        generator = generator.call(thisArg, _arguments);\n        function cast(value) { return value instanceof Promise && value.constructor === Promise ? value : new Promise(function (resolve) { resolve(value); }); }\n        function onfulfill(value) { try { step(\"next\", value); } catch (e) { reject(e); } }\n        function onreject(value) { try { step(\"throw\", value); } catch (e) { reject(e); } }\n        function step(verb, value) {\n            var result = generator[verb](value);\n            result.done ? resolve(result.value) : cast(result.value).then(onfulfill, onreject);\n        }\n        step(\"next\", void 0);\n    });\n};\nvar fs = require('fs');\nvar http = require('http');\nvar url = require('url');\nvar events_1 = require('events');\nlet Bluebird = require('bluebird');\nlet fsUnlink = Bluebird.promisify(fs.unlink);\nlet fsExists = function (path) {\n    return new Promise(function (resolve) {\n        fs.exists(path, resolve);\n    });\n};\nlet fsStat = Bluebird.promisify(fs.stat);\nclass Downloader {\n    static download(from, to) {\n        return new DownloadHandle(from, to);\n    }\n}\n(function (DownloadHandleState) {\n    DownloadHandleState[DownloadHandleState[\"STARTED\"] = 0] = \"STARTED\";\n    DownloadHandleState[DownloadHandleState[\"STARTING\"] = 1] = \"STARTING\";\n    DownloadHandleState[DownloadHandleState[\"STOPPED\"] = 2] = \"STOPPED\";\n    DownloadHandleState[DownloadHandleState[\"STOPPING\"] = 3] = \"STOPPING\";\n    DownloadHandleState[DownloadHandleState[\"FINISHED\"] = 4] = \"FINISHED\";\n})(exports.DownloadHandleState || (exports.DownloadHandleState = {}));\nvar DownloadHandleState = exports.DownloadHandleState;\nclass DownloadHandle {\n    constructor(_from, _to) {\n        this._from = _from;\n        this._to = _to;\n        this._state = DownloadHandleState.STOPPED;\n        this._emitter = new events_1.EventEmitter();\n        this.start();\n    }\n    get from() {\n        return this._from;\n    }\n    get to() {\n        return this._to;\n    }\n    get peakKbps() {\n        return this._peakSpeed / 1024;\n    }\n    get lowKbps() {\n        return this._lowSpeed / 1024;\n    }\n    get avgKbps() {\n        return this._avgSpeed / 1024;\n    }\n    get currentKbps() {\n        return this._curSpeed / 1024;\n    }\n    get currentAveragedSpeed() {\n        if (this._curSpeedTicks.length === 0) {\n            return this.currentKbps;\n        }\n        let sum = this._curSpeedTicks.reduce(function (accumulated, current) {\n            return accumulated + current / 1024;\n        }, 0);\n        return sum / this._curSpeedTicks.length;\n    }\n    get promise() {\n        if (!this._promise) {\n            this._promise = new Promise((resolve, reject) => {\n                this._resolver = resolve;\n                this._rejecter = reject;\n            });\n        }\n        return this._promise;\n    }\n    start() {\n        return __awaiter(this, void 0, Promise, function* () {\n            if (this._state !== DownloadHandleState.STOPPED) {\n                return false;\n            }\n            this._state = DownloadHandleState.STARTING;\n            this._promise = this.promise; // Make sure a promise exists when starting.\n            this._peakSpeed = 0;\n            this._lowSpeed = 0;\n            this._avgSpeed = 0;\n            this._speedTicksCount = 0;\n            this._curSpeed = 0;\n            this._curSpeedTicks = [];\n            this._totalSize = 0;\n            this._totalDownloaded = 0;\n            try {\n                let exists = yield fsExists(this._to);\n                if (yield fsExists(this._to)) {\n                    let stat = yield fsStat(this._to);\n                    this._totalDownloaded = stat.size;\n                }\n            }\n            catch (err) {\n                this.onError(err);\n            }\n            this.download();\n            return true;\n        });\n    }\n    stop() {\n        return __awaiter(this, void 0, Promise, function* () {\n            if (this._state !== DownloadHandleState.STARTED) {\n                return false;\n            }\n            this._state = DownloadHandleState.STOPPING;\n            clearInterval(this._curSpeedInterval);\n            this.response.removeAllListeners();\n            this.destStream.removeAllListeners();\n            this.response.unpipe(this.destStream);\n            this.destStream.close();\n            this.request.abort();\n            this._state = DownloadHandleState.STOPPED;\n            return true;\n        });\n    }\n    download() {\n        let hostUrl = url.parse(this._from);\n        let httpOptions = {\n            host: hostUrl.host,\n            path: hostUrl.path,\n            headers: {\n                'Range': 'bytes=' + this._totalDownloaded.toString() + '-',\n            }\n        };\n        this.destStream = fs.createWriteStream(this._to, {\n            encoding: 'binary',\n            flags: 'a',\n        });\n        this.request = http.request(httpOptions, (response) => {\n            this.response = response;\n            this._curSpeedInterval = setInterval(this.onTick.bind(this), 1000);\n            this._state = DownloadHandleState.STARTED;\n            // Unsatisfiable request - most likely we've downloaded the whole thing already.\n            // TODO - send HEAD request to get content-length and compare.\n            if (this.response.statusCode == 416) {\n                return this.onFinished();\n            }\n            // Expecting the partial response status code\n            if (this.response.statusCode != 206) {\n                return this.onError(new Error('Bad status code ' + this.response.statusCode));\n            }\n            if (!this.response.headers || !this.response.headers['content-range']) {\n                return this.onError(new Error('Missing or invalid content-range response header'));\n            }\n            try {\n                this._totalSize = parseInt(this.response.headers['content-range'].split('/')[1]);\n            }\n            catch (err) {\n                return this.onError(new Error('Invalid content-range header: ' + this.response.headers['content-range']));\n            }\n            this.response.setEncoding('binary');\n            this.response.pipe(this.destStream);\n            this.response.on('data', (data) => {\n                this._totalDownloaded += data.length;\n                this._curSpeed += data.length;\n            });\n            this.destStream.on('finish', () => this.onFinished());\n            this.response.on('error', (err) => this.onError(err));\n            this.destStream.on('error', (err) => this.onError(err));\n        });\n        this.request.on('error', (err) => this.onError(err));\n        this.request.end();\n    }\n    onProgress(fn) {\n        this._emitter.addListener('progress', fn);\n        return this;\n    }\n    onTick() {\n        this._curSpeedTicks.unshift(this._curSpeed);\n        this._speedTicksCount += 1;\n        this._avgSpeed += (this._curSpeed - this._avgSpeed) / this._speedTicksCount;\n        this._peakSpeed = Math.max(this._peakSpeed, this._curSpeed);\n        this._lowSpeed = Math.min(this._lowSpeed || Infinity, this._curSpeed);\n        this._curSpeed = 0;\n        if (this._curSpeedTicks.length > 5) {\n            this._curSpeedTicks.pop();\n        }\n        this._emitter.emit('progress', this._totalDownloaded / this._totalSize, this.currentKbps, this.peakKbps, this.lowKbps, this.avgKbps);\n    }\n    onError(err) {\n        this.stop();\n        this._rejecter(err);\n        this._promise = null;\n    }\n    onFinished() {\n        this.stop();\n        this._state = DownloadHandleState.FINISHED;\n        this._resolver();\n    }\n}\nexports.default = Downloader;\n","import * as fs from 'fs';\nimport * as http from 'http';\nimport * as url from 'url';\nimport * as util from 'util';\nimport { EventEmitter } from 'events';\n\nlet Bluebird = require( 'bluebird' );\nlet fsUnlink:( path: string ) => Promise<NodeJS.ErrnoException> = Bluebird.promisify( fs.unlink );\nlet fsExists = function( path: string ): Promise<boolean>\n{\n\treturn new Promise<boolean>( function( resolve )\n\t{\n\t\tfs.exists( path, resolve );\n\t} );\n}\nlet fsStat:( path: string ) => Promise<fs.Stats> = Bluebird.promisify( fs.stat );\n\nabstract class Downloader\n{\n\tstatic download( from: string, to: string ): DownloadHandle\n\t{\n\t\treturn new DownloadHandle( from, to );\n\t}\n}\n\nexport enum DownloadHandleState\n{\n\tSTARTED,\n\tSTARTING,\n\tSTOPPED,\n\tSTOPPING,\n\tFINISHED,\n}\n\nclass DownloadHandle\n{\n\tprivate _state: DownloadHandleState;\n\tprivate _emitter: EventEmitter;\n\tprivate _promise: Promise<void>;\n\tprivate _resolver: () => void;\n\tprivate _rejecter: ( err: NodeJS.ErrnoException ) => void;\n\tprivate _peakSpeed: number;\n\tprivate _lowSpeed: number;\n\tprivate _avgSpeed: number;\n\tprivate _speedTicksCount: number;\n\tprivate _curSpeed: number;\n\tprivate _curSpeedTicks: Array<number>;\n\tprivate _curSpeedInterval: number;\n\tprivate _totalSize: number;\n\tprivate _totalDownloaded: number;\n\tprivate destStream: fs.WriteStream;\n\tprivate request: http.ClientRequest;\n\tprivate response: http.IncomingMessage;\n\n\tconstructor( private _from: string, private _to: string )\n\t{\n\t\tthis._state = DownloadHandleState.STOPPED;\n\t\tthis._emitter = new EventEmitter();\n\t\tthis.start();\n\t}\n\n\tget from(): string\n\t{\n\t\treturn this._from;\n\t}\n\n\tget to(): string\n\t{\n\t\treturn this._to;\n\t}\n\n\tget peakKbps(): number\n\t{\n\t\treturn this._peakSpeed / 1024;\n\t}\n\n\tget lowKbps(): number\n\t{\n\t\treturn this._lowSpeed / 1024;\n\t}\n\n\tget avgKbps(): number\n\t{\n\t\treturn this._avgSpeed / 1024;\n\t}\n\n\tget currentKbps(): number\n\t{\n\t\treturn this._curSpeed / 1024;\n\t}\n\n\tget currentAveragedSpeed(): number\n\t{\n\t\tif ( this._curSpeedTicks.length === 0 ) {\n\t\t\treturn this.currentKbps;\n\t\t}\n\n\t\tlet sum = this._curSpeedTicks.reduce( function( accumulated, current )\n\t\t{\n\t\t\treturn accumulated + current / 1024;\n\t\t}, 0 );\n\n\t\treturn sum / this._curSpeedTicks.length;\n\t}\n\n\tget promise(): Promise<void>\n\t{\n\t\tif ( !this._promise ) {\n\t\t\tthis._promise = new Promise<void>( ( resolve, reject ) =>\n\t\t\t{\n\t\t\t\tthis._resolver = resolve;\n\t\t\t\tthis._rejecter = reject;\n\t\t\t} );\n\t\t}\n\t\treturn this._promise;\n\t}\n\n\tasync start()\n\t{\n\t\tif ( this._state !== DownloadHandleState.STOPPED ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._state = DownloadHandleState.STARTING;\n\n\t\tthis._promise = this.promise; // Make sure a promise exists when starting.\n\n\t\tthis._peakSpeed = 0;\n\t\tthis._lowSpeed = 0;\n\t\tthis._avgSpeed = 0;\n\t\tthis._speedTicksCount = 0;\n\t\tthis._curSpeed = 0;\n\t\tthis._curSpeedTicks = [];\n\t\tthis._totalSize = 0;\n\t\tthis._totalDownloaded = 0;\n\n\t\ttry {\n\t\t\tlet exists = await fsExists( this._to );\n\t\t\tif ( await fsExists( this._to ) ) {\n\t\t\t\tlet stat = await fsStat( this._to );\n\t\t\t\tthis._totalDownloaded = stat.size;\n\t\t\t}\n\t\t}\n\t\tcatch ( err ) {\n\t\t\tthis.onError( err );\n\t\t}\n\n\t\tthis.download();\n\t\treturn true;\n\t}\n\n\tasync stop()\n\t{\n\t\tif ( this._state !== DownloadHandleState.STARTED ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._state = DownloadHandleState.STOPPING;\n\n\t\tclearInterval( this._curSpeedInterval );\n\t\tthis.response.removeAllListeners();\n\t\tthis.destStream.removeAllListeners();\n\t\tthis.response.unpipe( this.destStream );\n\t\tthis.destStream.close();\n\t\tthis.request.abort();\n\n\t\tthis._state = DownloadHandleState.STOPPED;\n\n\t\treturn true;\n\t}\n\n\tprivate download()\n\t{\n\t\tlet hostUrl = url.parse( this._from );\n\t\tlet httpOptions = {\n\t\t\thost: hostUrl.host,\n\t\t\tpath: hostUrl.path,\n\t\t\theaders: {\n\t\t\t\t'Range': 'bytes=' + this._totalDownloaded.toString() + '-',\n\t\t\t}\n\t\t};\n\n\t\tthis.destStream = fs.createWriteStream( this._to, {\n\t\t\tencoding: 'binary',\n\t\t\tflags: 'a',\n\t\t} );\n\n\t\tthis.request = http.request( httpOptions, ( response ) =>\n\t\t{\n\t\t\tthis.response = response;\n\t\t\tthis._curSpeedInterval = setInterval( this.onTick.bind( this ), 1000 );\n\t\t\tthis._state = DownloadHandleState.STARTED;\n\n\t\t\t// Unsatisfiable request - most likely we've downloaded the whole thing already.\n\t\t\t// TODO - send HEAD request to get content-length and compare.\n\t\t\tif ( this.response.statusCode == 416 ) {\n\t\t\t\treturn this.onFinished();\n\t\t\t}\n\n\t\t\t// Expecting the partial response status code\n\t\t\tif ( this.response.statusCode != 206 ) {\n\t\t\t\treturn this.onError( new Error( 'Bad status code ' + this.response.statusCode ) );\n\t\t\t}\n\n\t\t\tif ( !this.response.headers || !this.response.headers[ 'content-range' ] ) {\n\t\t\t\treturn this.onError( new Error( 'Missing or invalid content-range response header' ) );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tthis._totalSize = parseInt( this.response.headers[ 'content-range' ].split( '/' )[1] );\n\t\t\t}\n\t\t\tcatch ( err ) {\n\t\t\t\treturn this.onError( new Error( 'Invalid content-range header: ' + this.response.headers[ 'content-range' ] ) );\n\t\t\t}\n\n\t\t\tthis.response.setEncoding( 'binary' );\n\t\t\tthis.response.pipe( this.destStream );\n\t\t\tthis.response.on( 'data', ( data ) =>\n\t\t\t{\n\t\t\t\tthis._totalDownloaded += data.length;\n\t\t\t\tthis._curSpeed += data.length;\n\t\t\t} );\n\n\t\t\tthis.destStream.on( 'finish', () => this.onFinished() );\n\n\t\t\tthis.response.on( 'error', ( err ) => this.onError( err ) );\n\t\t\tthis.destStream.on( 'error', ( err ) => this.onError( err ) );\n\t\t} );\n\t\tthis.request.on( 'error', ( err ) => this.onError( err ) );\n\t\tthis.request.end();\n\t}\n\n\tonProgress( fn: ( progress: number, curKbps: number, peakKbps: number, lowKbps: number, avgKbps: number ) => void ): DownloadHandle\n\t{\n\t\tthis._emitter.addListener( 'progress', fn );\n\t\treturn this;\n\t}\n\n\tprivate onTick()\n\t{\n\t\tthis._curSpeedTicks.unshift( this._curSpeed );\n\t\tthis._speedTicksCount += 1;\n\t\tthis._avgSpeed += ( this._curSpeed - this._avgSpeed ) / this._speedTicksCount;\n\t\tthis._peakSpeed = Math.max( this._peakSpeed, this._curSpeed );\n\t\tthis._lowSpeed = Math.min( this._lowSpeed || Infinity, this._curSpeed );\n\t\tthis._curSpeed = 0;\n\n\t\tif ( this._curSpeedTicks.length > 5 ) { // Save only the 5 last seconds for average speed\n\t\t\tthis._curSpeedTicks.pop();\n\t\t}\n\n\t\tthis._emitter.emit( 'progress', this._totalDownloaded / this._totalSize, this.currentKbps,  this.peakKbps, this.lowKbps, this.avgKbps );\n\t}\n\n\tprivate onError( err: NodeJS.ErrnoException )\n\t{\n\t\tthis.stop();\n\t\tthis._rejecter( err );\n\t\tthis._promise = null;\n\t}\n\n\tprivate onFinished()\n\t{\n\t\tthis.stop();\n\t\tthis._state = DownloadHandleState.FINISHED;\n\t\tthis._resolver();\n\t}\n}\n\nexport default Downloader;"],"sourceRoot":"../../src/"}