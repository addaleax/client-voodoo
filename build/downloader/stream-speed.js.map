{"version":3,"sources":["downloader/stream-speed.ts"],"names":["SampleUnit","StreamSpeed","StreamSpeed.constructor","StreamSpeed.takeSample","StreamSpeed._takeSample","StreamSpeed.emitSample","StreamSpeed.start","StreamSpeed.stop","StreamSpeed.onSample","StreamSpeed.convertSample","StreamSpeed.convertSample.getUnit"],"mappings":"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","file":"downloader/stream-speed.js","sourcesContent":["import { TransformOptions, PassThrough } from 'stream';\nimport { EventEmitter } from 'events';\n\nexport interface ISampleData\n{\n\tcurrent: number;\n\tcurrentAverage: number;\n\tpeak: number;\n\tlow: number;\n\taverage: number;\n\n\tunit: SampleUnit;\n\tsampleCount: number;\n}\n\nexport interface ISampleOptions\n{\n\tsamplesPerSecond?: number;\n\tsamplesForAverage?: number;\n}\n\nexport interface IStreamSpeedOptions extends ISampleOptions, TransformOptions\n{\n}\n\nexport enum SampleUnit\n{\n\tBps  = 0,\n\tKBps = 1,\n\tMBps = 2, // Anything south of here is silly.\n\tGBps = 3, // Why do I have it if it's so silly you ask?\n\tTBps = 4, // Well...\n\tPBps = 5, // You see...\n\tEBps = 6, // I have a reason.\n\tZBps = 7, // It's just that...\n\tYBps = 8, // I like writing useless code.\n}\n\nexport class StreamSpeed extends PassThrough\n{\n\tprivate samplesPerSecond: number;\n\tprivate samplesForAverage: number;\n\tprivate samplesTaken: number;\n\tprivate samples: number[];\n\n\tprivate interval: NodeJS.Timer;\n\tprivate current: number;\n\tprivate currentAverage: number;\n\tprivate peak: number;\n\tprivate low: number;\n\tprivate average: number;\n\n\tprivate emitter: EventEmitter;\n\n\tconstructor( options?: IStreamSpeedOptions )\n\t{\n\t\tsuper( options );\n\n\t\tthis.on( 'data', ( data ) =>\n\t\t{\n\t\t\tthis.current += data.length;\n\t\t} );\n\n\t\tthis.on( 'end', () => this.stop() );\n\t\tthis.emitter = new EventEmitter();\n\n\t\tthis.start( options );\n\t}\n\n\ttakeSample( unit: SampleUnit, precision?: number ): ISampleData\n\t{\n\t\tlet sample = this._takeSample( true );\n\t\treturn StreamSpeed.convertSample( sample, unit, precision );\n\t}\n\n\tstatic convertSample( sample: ISampleData, unit: SampleUnit, precision?: number ): ISampleData\n\t{\n\t\tlet div = Math.pow( 1024, unit ) / Math.pow( 1024, sample.unit ); // Use sane units ok?\n\t\tprecision = Math.pow( 10, precision || 2 );\n\n\t\tfunction getUnit( value ): number\n\t\t{\n\t\t\treturn Math.round( value * precision / div ) / precision;\n\t\t}\n\n\t\tsample.current = getUnit( sample.current );\n\t\tsample.currentAverage = getUnit( sample.currentAverage );\n\t\tsample.peak = getUnit( sample.peak );\n\t\tsample.low = getUnit( sample.low );\n\t\tsample.average = getUnit( sample.average );\n\t\tsample.unit = unit;\n\n\t\treturn sample;\n\t}\n\n\tprivate _takeSample( onDemand?: boolean ): ISampleData\n\t{\n\t\tthis.samplesTaken += 1;\n\n\t\tthis.average += ( this.current - this.average ) / this.samplesTaken * this.samplesPerSecond;\n\t\tthis.peak = Math.max( this.peak, this.current ) * this.samplesPerSecond;\n\t\tthis.low = Math.min( this.low || Infinity, this.current ) * this.samplesPerSecond;\n\n\t\tthis.samples.unshift( this.current );\n\n\t\tthis.currentAverage = this.samples.reduce( ( accumulate, value ) =>\n\t\t{\n\t\t\treturn accumulate + value * this.samplesPerSecond;\n\t\t}, 0 );\n\t\tthis.currentAverage /= Math.min( this.samples.length, this.samplesForAverage );\n\n\t\tlet sampleData = StreamSpeed.convertSample( {\n\t\t\tcurrent: this.current * this.samplesPerSecond,\n\t\t\tcurrentAverage: this.currentAverage,\n\t\t\tpeak: this.peak,\n\t\t\tlow: this.low,\n\t\t\taverage: this.average,\n\n\t\t\tunit: SampleUnit.Bps,\n\t\t\tsampleCount: this.samplesTaken,\n\t\t}, SampleUnit.Bps );\n\n\t\tif ( !onDemand ) {\n\t\t\tif ( this.samples.length > this.samplesForAverage ) {\n\t\t\t\tthis.samples.pop();\n\t\t\t}\n\n\t\t\tthis.emitSample( sampleData );\n\t\t\tthis.current = 0;\n\t\t}\n\t\t// If were doing an on demand we need to roll back some data so we wouldn't screw up the next sample\n\t\telse {\n\t\t\tthis.samples = this.samples.slice( 1 );\n\t\t\tthis.samplesTaken -= 1;\n\t\t}\n\n\t\treturn sampleData;\n\t}\n\n\tprivate emitSample( sample: ISampleData )\n\t{\n\t\tthis.emitter.emit( 'sample', sample );\n\t}\n\n\tstart( options?: ISampleOptions )\n\t{\n\t\tthis.samples = [];\n\t\tthis.samplesTaken = 0;\n\t\tthis.current = 0;\n\t\tthis.currentAverage = 0;\n\t\tthis.peak = 0;\n\t\tthis.low = 0;\n\t\tthis.average = 0;\n\n\t\toptions = options || {};\n\t\tthis.samplesPerSecond = options.samplesPerSecond || 2;\n\t\tthis.samplesForAverage = options.samplesForAverage || ( 5 * this.samplesPerSecond );\n\t\tthis.interval = setInterval( () => this._takeSample(), 1000 / this.samplesPerSecond );\n\t}\n\n\tstop()\n\t{\n\t\tclearInterval( this.interval );\n\t\tthis.current = 0;\n\t}\n\n\tonSample( cb: ( sample?: ISampleData ) => any )\n\t{\n\t\tthis.emitter.on( 'sample', cb );\n\t}\n}\n\nexport default StreamSpeed;"],"sourceRoot":"../../src/"}