{"version":3,"sources":["extractor/index-spec.js","extractor/index-spec.ts"],"names":[],"mappings":"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","file":"extractor/index-spec.js","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, Promise, generator) {\n    return new Promise(function (resolve, reject) {\n        generator = generator.call(thisArg, _arguments);\n        function cast(value) { return value instanceof Promise && value.constructor === Promise ? value : new Promise(function (resolve) { resolve(value); }); }\n        function onfulfill(value) { try { step(\"next\", value); } catch (e) { reject(e); } }\n        function onreject(value) { try { step(\"throw\", value); } catch (e) { reject(e); } }\n        function step(verb, value) {\n            var result = generator[verb](value);\n            result.done ? resolve(result.value) : cast(result.value).then(onfulfill, onreject);\n        }\n        step(\"next\", void 0);\n    });\n};\nvar express = require('express');\nvar downloader_1 = require('../downloader');\nvar index_1 = require('./index');\nvar stream_speed_1 = require('../downloader/stream-speed');\nvar path = require('path');\nlet gzip = require('gunzip-maybe');\nlet xz = require('lzma-native').createDecompressor;\ndescribe('Extractor', function () {\n    let app;\n    let server;\n    let downloadFile = path.join('test-files', 'downloaded', 'Bug_Bash.zip.tar');\n    before(function (done) {\n        app = express();\n        app.use(express.static('../../test-files'));\n        server = app.listen(1337, function () {\n            done();\n        });\n    });\n    after(function (done) {\n        server.close(function () {\n            done();\n        });\n        app = null;\n        server = null;\n    });\n    // it( 'Should work with tar.gz files', async () =>\n    // {\n    // \tlet handle = Downloader.download( 'https://s3-us-west-2.amazonaws.com/ylivay-gj-test-oregon/data/games/1/168/82418/files/5666cfe4c69d9/Bug_Bash.exe.tar.gz', downloadFile, {\n    // \t\toverwrite: true,\n    // \t\tdecompressStream: gzip(),\n    // \t} );\n    // \thandle.onProgress( SampleUnit.KBps, function( data )\n    // \t{\n    // \t\tconsole.log( 'Download progress: ' + Math.floor( data.progress * 100 ) + '%' );\n    // \t\tconsole.log( 'Current speed: ' + Math.floor( data.sample.current ) + ' kbps (' + data.sample.currentAverage + ' kbps current average), peak: ' + Math.floor( data.sample.peak ) + ' kbps, low: ' + Math.floor( data.sample.low ) + ', average: ' + Math.floor( data.sample.average ) + ' kbps' );\n    // \t} );\n    // \tawait handle.promise;\n    // \treturn Extractor.extract( handle.to, path.join( 'test-files', 'extracted', path.basename( handle.to ) ), {\n    // \t\tdeleteSource: true,\n    // \t\toverwrite: true,\n    // \t} ).promise;\n    // } );\n    // it( 'Should work with tar.xz files', async () =>\n    // {\n    // \tlet handle = Downloader.download( 'https://s3-us-west-2.amazonaws.com/ylivay-gj-test-oregon/data/games/0/0/52250/files/566973cb4684c/GJGas.exe.tar.xz', downloadFile, {\n    // \t\toverwrite: true,\n    // \t\tdecompressStream: xz(),\n    // \t} );\n    // \thandle.onProgress( SampleUnit.KBps, function( data )\n    // \t{\n    // \t\tconsole.log( 'Download progress: ' + Math.floor( data.progress * 100 ) + '%' );\n    // \t\tconsole.log( 'Current speed: ' + Math.floor( data.sample.current ) + ' kbps (' + data.sample.currentAverage + ' kbps current average), peak: ' + Math.floor( data.sample.peak ) + ' kbps, low: ' + Math.floor( data.sample.low ) + ', average: ' + Math.floor( data.sample.average ) + ' kbps' );\n    // \t} );\n    // \tawait handle.promise;\n    // \treturn Extractor.extract( handle.to, path.join( 'test-files', 'extracted', path.basename( handle.to ) ), {\n    // \t\tdeleteSource: true,\n    // \t\toverwrite: true,\n    // \t} ).promise;\n    // } );\n    it('Should allow resumable extraction', (done) => __awaiter(this, void 0, Promise, function* () {\n        let handle = downloader_1.Downloader.download('https://s3-us-west-2.amazonaws.com/ylivay-gj-test-oregon/data/games/0/0/52250/files/566973cb4684c/GJGas.exe.tar.xz', downloadFile, {\n            overwrite: true,\n            decompressStream: xz(),\n        });\n        handle.onProgress(stream_speed_1.SampleUnit.KBps, function (data) {\n            console.log('Download progress: ' + Math.floor(data.progress * 100) + '%');\n            console.log('Current speed: ' + Math.floor(data.sample.current) + ' kbps (' + data.sample.currentAverage + ' kbps current average), peak: ' + Math.floor(data.sample.peak) + ' kbps, low: ' + Math.floor(data.sample.low) + ', average: ' + Math.floor(data.sample.average) + ' kbps');\n        });\n        yield handle.promise;\n        let extractionHandle = index_1.Extractor.extract('test-files/Downloads.tar', path.join('test-files', 'extracted', path.basename('test')), {\n            deleteSource: false,\n            overwrite: true,\n        });\n        let waited = false;\n        extractionHandle.promise.then(() => {\n            if (!waited) {\n                done(new Error('Extraction finished too fast! Run again with a shorter delay.'));\n                return;\n            }\n            done();\n        });\n        // What a hacky way to catch the extraction in the middle. Don't judge me.\n        // If resumes too fast it means the file is fully extracted or is fully contained in the readable stream's internal buffer.\n        // Use a bigger file!\n        yield new Promise((resolve) => setTimeout(resolve, 100));\n        yield extractionHandle.stop();\n        console.log('Stopping to smell the bees.');\n        yield new Promise((resolve) => setTimeout(resolve, 3000));\n        waited = true;\n        console.log('I meant flowers.');\n        yield extractionHandle.start();\n        yield extractionHandle.promise;\n    }));\n});\n","import express = require( 'express' );\nimport http = require( 'http' );\nimport { Downloader } from '../downloader';\nimport { Extractor } from './index';\nimport { SampleUnit } from '../downloader/stream-speed';\nimport path = require( 'path' );\n\nlet gzip = require( 'gunzip-maybe' );\nlet xz = require( 'lzma-native' ).createDecompressor;\n\ndescribe( 'Extractor', function()\n{\n\tlet app: express.Express;\n\tlet server: http.Server;\n\tlet downloadFile = path.join( 'test-files', 'downloaded', 'Bug_Bash.zip.tar' );\n\n\tbefore( function( done )\n\t{\n\t\tapp = express();\n\t\tapp.use( express.static( '../../test-files' ) );\n\t\tserver = app.listen( 1337, function()\n\t\t{\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tafter( function( done )\n\t{\n\t\tserver.close( function()\n\t\t{\n\t\t\tdone();\n\t\t} );\n\n\t\tapp = null;\n\t\tserver = null;\n\t} );\n\n\t// it( 'Should work with tar.gz files', async () =>\n\t// {\n\t// \tlet handle = Downloader.download( 'https://s3-us-west-2.amazonaws.com/ylivay-gj-test-oregon/data/games/1/168/82418/files/5666cfe4c69d9/Bug_Bash.exe.tar.gz', downloadFile, {\n\t// \t\toverwrite: true,\n\t// \t\tdecompressStream: gzip(),\n\t// \t} );\n\n\t// \thandle.onProgress( SampleUnit.KBps, function( data )\n\t// \t{\n\t// \t\tconsole.log( 'Download progress: ' + Math.floor( data.progress * 100 ) + '%' );\n\t// \t\tconsole.log( 'Current speed: ' + Math.floor( data.sample.current ) + ' kbps (' + data.sample.currentAverage + ' kbps current average), peak: ' + Math.floor( data.sample.peak ) + ' kbps, low: ' + Math.floor( data.sample.low ) + ', average: ' + Math.floor( data.sample.average ) + ' kbps' );\n\t// \t} );\n\n\t// \tawait handle.promise;\n\n\t// \treturn Extractor.extract( handle.to, path.join( 'test-files', 'extracted', path.basename( handle.to ) ), {\n\t// \t\tdeleteSource: true,\n\t// \t\toverwrite: true,\n\t// \t} ).promise;\n\t// } );\n\n\t// it( 'Should work with tar.xz files', async () =>\n\t// {\n\t// \tlet handle = Downloader.download( 'https://s3-us-west-2.amazonaws.com/ylivay-gj-test-oregon/data/games/0/0/52250/files/566973cb4684c/GJGas.exe.tar.xz', downloadFile, {\n\t// \t\toverwrite: true,\n\t// \t\tdecompressStream: xz(),\n\t// \t} );\n\n\t// \thandle.onProgress( SampleUnit.KBps, function( data )\n\t// \t{\n\t// \t\tconsole.log( 'Download progress: ' + Math.floor( data.progress * 100 ) + '%' );\n\t// \t\tconsole.log( 'Current speed: ' + Math.floor( data.sample.current ) + ' kbps (' + data.sample.currentAverage + ' kbps current average), peak: ' + Math.floor( data.sample.peak ) + ' kbps, low: ' + Math.floor( data.sample.low ) + ', average: ' + Math.floor( data.sample.average ) + ' kbps' );\n\t// \t} );\n\n\t// \tawait handle.promise;\n\n\t// \treturn Extractor.extract( handle.to, path.join( 'test-files', 'extracted', path.basename( handle.to ) ), {\n\t// \t\tdeleteSource: true,\n\t// \t\toverwrite: true,\n\t// \t} ).promise;\n\t// } );\n\n\tit( 'Should allow resumable extraction', async ( done ) =>\n\t{\n\t\tlet handle = Downloader.download( 'https://s3-us-west-2.amazonaws.com/ylivay-gj-test-oregon/data/games/0/0/52250/files/566973cb4684c/GJGas.exe.tar.xz', downloadFile, {\n\t\t\toverwrite: true,\n\t\t\tdecompressStream: xz(),\n\t\t} );\n\n\t\thandle.onProgress( SampleUnit.KBps, function( data )\n\t\t{\n\t\t\tconsole.log( 'Download progress: ' + Math.floor( data.progress * 100 ) + '%' );\n\t\t\tconsole.log( 'Current speed: ' + Math.floor( data.sample.current ) + ' kbps (' + data.sample.currentAverage + ' kbps current average), peak: ' + Math.floor( data.sample.peak ) + ' kbps, low: ' + Math.floor( data.sample.low ) + ', average: ' + Math.floor( data.sample.average ) + ' kbps' );\n\t\t} );\n\n\t\tawait handle.promise;\n\n\t\tlet extractionHandle = Extractor.extract( 'test-files/Downloads.tar', path.join( 'test-files', 'extracted', path.basename( 'test' ) ), {\n\t\t\tdeleteSource: false,\n\t\t\toverwrite: true,\n\t\t} );\n\n\t\tlet waited = false;\n\t\textractionHandle.promise.then( () =>\n\t\t{\n\t\t\tif ( !waited ) {\n\t\t\t\tdone( new Error( 'Extraction finished too fast! Run again with a shorter delay.' ) );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdone();\n\t\t} );\n\n\t\t// What a hacky way to catch the extraction in the middle. Don't judge me.\n\t\t// If resumes too fast it means the file is fully extracted or is fully contained in the readable stream's internal buffer.\n\t\t// Use a bigger file!\n\t\tawait new Promise( ( resolve ) => setTimeout( resolve, 100 ) );\n\n\t\tawait extractionHandle.stop();\n\t\tconsole.log( 'Stopping to smell the bees.' );\n\t\tawait new Promise( ( resolve ) => setTimeout( resolve, 3000 ) );\n\t\twaited = true;\n\t\tconsole.log( 'I meant flowers.' );\n\t\tawait extractionHandle.start();\n\n\t\tawait extractionHandle.promise;\n\t} );\n} );"],"sourceRoot":"../../src/"}