{"version":3,"sources":["launcher/pid-finder.js","launcher/pid-finder.ts"],"names":["PidFinder","PidFinder.isWindows","PidFinder.find","PidFinder.findWindows","PidFinder.findNonWindows"],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAI,SAAS,GAAG,AAAC,aAAQ,UAAK,SAAS,IAAK,UAAU,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,SAAS,EAAE;AAC3F,WAAO,IAAI,OAAO,CAAC,UAAU,OAAO,EAAE,MAAM,EAAE;AAC1C,iBAAS,GAAG,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;AAChD,iBAAS,IAAI,CAAC,KAAK,EAAE;AAAE,mBAAO,KAAK,YAAY,OAAO,IAAI,KAAK,CAAC,WAAW,KAAK,OAAO,GAAG,KAAK,GAAG,IAAI,OAAO,CAAC,UAAU,OAAO,EAAE;AAAE,uBAAO,CAAC,KAAK,CAAC,CAAC;aAAE,CAAC,CAAC;SAAE;AACxJ,iBAAS,SAAS,CAAC,KAAK,EAAE;AAAE,gBAAI;AAAE,oBAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;aAAE,CAAC,OAAO,CAAC,EAAE;AAAE,sBAAM,CAAC,CAAC,CAAC,CAAC;aAAE;SAAE;AACnF,iBAAS,QAAQ,CAAC,KAAK,EAAE;AAAE,gBAAI;AAAE,oBAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;aAAE,CAAC,OAAO,CAAC,EAAE;AAAE,sBAAM,CAAC,CAAC,CAAC,CAAC;aAAE;SAAE;AACnF,iBAAS,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE;AACvB,gBAAI,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;AACpC,kBAAM,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;SACtF;AACD,YAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;KACxB,CAAC,CAAC;CACN,CAAC;ACZF,IAAY,YAAY,GAAA,OAAA,CAAM,eAAe,CAAC,CAAA;;IAE9C,SAAA;aAAA,SAAA;4CAAA,SAAA;;;+BAAA,SAAA;;oCAEiBA;AAEfC,mBAAOA,OAAOA,CAACA,QAAQA,KAAKA,OAAOA,CAACA;SACpCA;;;6BAEYD,GAAWA,EAAAA;AAEvBE,mBAAOA,IAAIA,CAACA,SAASA,EAAEA,GAAGA,IAAIA,CAACA,WAAWA,CAAEA,GAAGA,CAAEA,GAAGA,IAAIA,CAACA,cAAcA,CAAEA,GAAGA,CAAEA,CAACA;SAC/EA;;;oCAEmBF,GAAWA,EAAAA;AAE9BG,mBAAOA,sBAAsBA,UAAEA,OAAOA,EAAAA;;AAGrCA,oBAAIA,GAAGA,GAAGA,YAAYA,CAACA,KAAKA,CAAEA,KAAKA,CAAEA,CAACA;AAEtCA,oBAAIA,GAAGA,GAAGA,EAAEA,CAACA;AACbA,mBAAGA,CAACA,MAAMA,CAACA,EAAEA,CAAEA,MAAMA,EAAEA,UAAEA,IAAYA,EAAAA;AAEpCA,uBAAGA,IAAIA,IAAIA,CAACA,QAAQA,EAAEA,CAACA;iBACvBA,CAAEA,CAACA;AAEJA,oBAAIA,GAAGA,GAAGA,EAAEA,CAACA;AACbA,mBAAGA,CAACA,MAAMA,CAACA,EAAEA,CAAEA,MAAMA,EAAEA,UAAEA,IAAYA,EAAAA;AAEpCA,uBAAGA,IAAIA,IAAIA,CAACA,QAAQA,EAAEA,CAACA;iBACvBA,CAAEA,CAACA;AAEJA,mBAAGA,CAACA,EAAEA,CAAEA,MAAMA,EAAEA,YAAAA;AAEfA,wBAAIA,IAAIA,GAAGA,GAAGA,CAACA,KAAKA,CAAEA,MAAMA,CAAEA,CAACA;AAC/BA,2BAAOA,CAAEA,IAAIA,CAACA,MAAMA,IAAIA,CAACA,IAAIA,IAAIA,CAACA,CAACA,CAACA,CAACA,UAAUA,CAAEA,YAAYA,CAAEA,CAAEA,CAACA;iBAClEA,CAAEA,CAACA;AAEJA,mBAAGA,CAACA,KAAKA,CAACA,KAAKA,CAAEA,uBAAuBA,GAAGA,GAAGA,CAACA,QAAQA,EAAEA,GAAGA,aAAaA,CAAEA,CAACA;AAC5EA,mBAAGA,CAACA,KAAKA,CAACA,GAAGA,EAAEA,CAACA;aAChBA,CAAEA,CAACA;SACJA;;;uCAEsBH,GAAWA,EAAAA;AAEjCI,mBAAOA,sBAAsBA,UAAEA,OAAOA,EAAEA,MAAMA,EAAAA;;AAG7CA,oBAAIA,GAAGA,GAAGA,YAAYA,CAACA,IAAIA,CAAEA,QAAQA,GAAGA,GAAGA,CAACA,QAAQA,EAAEA,EAAEA,UAAEA,GAAGA,EAAEA,MAAMA,EAAEA,MAAMA,EAAAA;AAE5EA,wBAAKA,GAAIA,EAAEA;AACVA,+BAAOA,MAAMA,CAAEA,GAAGA,CAAEA,CAACA;qBACrBA;AAEDA,wBAAIA,IAAIA,GAAGA,MAAMA,CAACA,QAAQA,EAAEA,CAACA,KAAKA,CAAEA,IAAIA,CAAEA,CAACA;AAC3CA,2BAAOA,CAAEA,IAAIA,CAACA,MAAMA,IAAIA,CAACA,CAAEA,CAACA;iBAC5BA,CAAEA,CAACA;aACJA,CAAEA,CAACA;SACJA;;WAzDF,SAAA;;;AAAsB,OAAA,CAAA,SAAS,GAAA,SA0D9B,CAAA","file":"launcher/pid-finder.js","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, Promise, generator) {\n    return new Promise(function (resolve, reject) {\n        generator = generator.call(thisArg, _arguments);\n        function cast(value) { return value instanceof Promise && value.constructor === Promise ? value : new Promise(function (resolve) { resolve(value); }); }\n        function onfulfill(value) { try { step(\"next\", value); } catch (e) { reject(e); } }\n        function onreject(value) { try { step(\"throw\", value); } catch (e) { reject(e); } }\n        function step(verb, value) {\n            var result = generator[verb](value);\n            result.done ? resolve(result.value) : cast(result.value).then(onfulfill, onreject);\n        }\n        step(\"next\", void 0);\n    });\n};\nvar childProcess = require('child_process');\nclass PidFinder {\n    static isWindows() {\n        return process.platform === 'win32';\n    }\n    static find(pid) {\n        return this.isWindows() ? this.findWindows(pid) : this.findNonWindows(pid);\n    }\n    static findWindows(pid) {\n        return new Promise((resolve) => {\n            // Need spawn because for some odd reason sometimes you cant use tasklist directly..\n            let cmd = childProcess.spawn('cmd');\n            let out = '';\n            cmd.stdout.on('data', (data) => {\n                out += data.toString();\n            });\n            let err = '';\n            cmd.stderr.on('data', (data) => {\n                err += data.toString();\n            });\n            cmd.on('exit', () => {\n                let data = out.split('\\r\\n');\n                resolve(data.length >= 2 && data[0].startsWith(\"Image Name\"));\n            });\n            cmd.stdin.write('tasklist /FI;\"PID eq ' + pid.toString() + '\" /FO:CSV\\n');\n            cmd.stdin.end();\n        });\n    }\n    static findNonWindows(pid) {\n        return new Promise((resolve, reject) => {\n            // Need spawn because for some odd reason sometimes you cant use tasklist directly..\n            let cmd = childProcess.exec('ps -p ' + pid.toString(), (err, stdout, stderr) => {\n                if (err) {\n                    return reject(err);\n                }\n                let data = stdout.toString().split('\\n');\n                resolve(data.length >= 2);\n            });\n        });\n    }\n}\nexports.PidFinder = PidFinder;\n","import * as childProcess from 'child_process';\n\nexport abstract class PidFinder\n{\n\tstatic isWindows()\n\t{\n\t\treturn process.platform === 'win32';\n\t}\n\n\tstatic find( pid: number )\n\t{\n\t\treturn this.isWindows() ? this.findWindows( pid ) : this.findNonWindows( pid );\n\t}\n\n\tstatic findWindows( pid: number )\n\t{\n\t\treturn new Promise<boolean>( ( resolve ) =>\n\t\t{\n\t\t\t// Need spawn because for some odd reason sometimes you cant use tasklist directly..\n\t\t\tlet cmd = childProcess.spawn( 'cmd' );\n\n\t\t\tlet out = '';\n\t\t\tcmd.stdout.on( 'data', ( data: Buffer ) =>\n\t\t\t{\n\t\t\t\tout += data.toString();\n\t\t\t} );\n\n\t\t\tlet err = '';\n\t\t\tcmd.stderr.on( 'data', ( data: Buffer ) =>\n\t\t\t{\n\t\t\t\terr += data.toString();\n\t\t\t} );\n\n\t\t\tcmd.on( 'exit', () =>\n\t\t\t{\n\t\t\t\tlet data = out.split( '\\r\\n' );\n\t\t\t\tresolve( data.length >= 2 && data[0].startsWith( \"Image Name\" ) );\n\t\t\t} );\n\n\t\t\tcmd.stdin.write( 'tasklist /FI;\"PID eq ' + pid.toString() + '\" /FO:CSV\\n' );\n\t\t\tcmd.stdin.end();\n\t\t} );\n\t}\n\n\tstatic findNonWindows( pid: number )\n\t{\n\t\treturn new Promise<boolean>( ( resolve, reject ) =>\n\t\t{\n\t\t\t// Need spawn because for some odd reason sometimes you cant use tasklist directly..\n\t\t\tlet cmd = childProcess.exec( 'ps -p ' + pid.toString(), ( err, stdout, stderr ) =>\n\t\t\t{\n\t\t\t\tif ( err ) {\n\t\t\t\t\treturn reject( err );\n\t\t\t\t}\n\n\t\t\t\tlet data = stdout.toString().split( '\\n' );\n\t\t\t\tresolve( data.length >= 2 );\n\t\t\t} );\n\t\t} );\n\t}\n}"],"sourceRoot":"../../src/"}