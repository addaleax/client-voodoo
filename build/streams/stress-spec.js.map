{"version":3,"sources":["streams/stress-spec.js","streams/stress-spec.ts"],"names":["test"],"mappings":"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","file":"streams/stress-spec.js","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, Promise, generator) {\n    return new Promise(function (resolve, reject) {\n        generator = generator.call(thisArg, _arguments);\n        function cast(value) { return value instanceof Promise && value.constructor === Promise ? value : new Promise(function (resolve) { resolve(value); }); }\n        function onfulfill(value) { try { step(\"next\", value); } catch (e) { reject(e); } }\n        function onreject(value) { try { step(\"throw\", value); } catch (e) { reject(e); } }\n        function step(verb, value) {\n            var result = generator[verb](value);\n            result.done ? resolve(result.value) : cast(result.value).then(onfulfill, onreject);\n        }\n        step(\"next\", void 0);\n    });\n};\ndescribe('Stream awaiter', () => {\n    it('should complete simple function calls', (done) => {\n        function test() {\n            return 5;\n        }\n        for (let i = 0; i < 100000; i += 1) {\n            test();\n        }\n        done();\n    });\n    it('should complete promise function calls', (done) => {\n        function test() {\n            return new Promise((resolve) => resolve(5));\n        }\n        let promise = test();\n        for (let i = 1; i < 100000; i += 1) {\n            promise = promise.then(() => test());\n        }\n        promise.then(() => done());\n    });\n    it('should complete simple await function calls', (done) => __awaiter(this, void 0, Promise, function* () {\n        function test() {\n            return __awaiter(this, void 0, Promise, function* () {\n                return 5;\n            });\n        }\n        for (let i = 0; i < 100000; i += 1) {\n            yield test();\n        }\n        done();\n    }));\n    it('should complete promise await function calls', (done) => __awaiter(this, void 0, Promise, function* () {\n        function test() {\n            return __awaiter(this, void 0, Promise, function* () {\n                return new Promise((resolve) => resolve(5));\n            });\n        }\n        for (let i = 0; i < 100000; i += 1) {\n            yield test();\n        }\n        done();\n    }));\n});\n","describe( 'Stream awaiter', () =>\n{\n\tit( 'should complete simple function calls', ( done ) =>\n\t{\n\t\tfunction test()\n\t\t{\n\t\t\treturn 5;\n\t\t}\n\n\t\tfor ( let i = 0; i < 100000; i += 1 ) {\n\t\t\ttest();\n\t\t}\n\t\tdone();\n\t} );\n\n\tit( 'should complete promise function calls', ( done ) =>\n\t{\n\t\tfunction test()\n\t\t{\n\t\t\treturn new Promise( ( resolve ) => resolve( 5 ) );\n\t\t}\n\n\t\tlet promise = test();\n\t\tfor ( let i = 1; i < 100000; i += 1 ) {\n\t\t\tpromise = promise.then( () => test() );\n\t\t}\n\t\tpromise.then( () => done() );\n\t} );\n\n\tit( 'should complete simple await function calls', async ( done ) =>\n\t{\n\t\tasync function test()\n\t\t{\n\t\t\treturn 5;\n\t\t}\n\n\t\tfor ( let i = 0; i < 100000; i += 1 ) {\n\t\t\tawait test();\n\t\t}\n\t\tdone();\n\t} );\n\n\tit( 'should complete promise await function calls', async ( done ) =>\n\t{\n\t\tasync function test()\n\t\t{\n\t\t\treturn new Promise<number>( ( resolve ) => resolve( 5 ) );\n\t\t}\n\n\t\tfor ( let i = 0; i < 100000; i += 1 ) {\n\t\t\tawait test();\n\t\t}\n\t\tdone();\n\t} );\n} );"],"sourceRoot":"../../src/"}